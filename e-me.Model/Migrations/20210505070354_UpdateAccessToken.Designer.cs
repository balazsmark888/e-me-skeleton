// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_me.Model.DBContext;

namespace e_me.Model.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210505070354_UpdateAccessToken")]
    partial class UpdateAccessToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("e_me.Model.Models.ApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSetting");
                });

            modelBuilder.Entity("e_me.Model.Models.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId")
                        .IsUnique();

                    b.ToTable("DocumentTemplate");
                });

            modelBuilder.Entity("e_me.Model.Models.DocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06d71d65-8b2d-432b-ac89-9bf834e295ba"),
                            DisplayName = "Test Document Type",
                            Name = "TestDocumentType"
                        },
                        new
                        {
                            Id = new Guid("1db502c5-a92b-48b1-bccb-77f4f3060c48"),
                            DisplayName = "Self Declaration",
                            Name = "SelfDeclaration"
                        });
                });

            modelBuilder.Entity("e_me.Model.Models.JwtToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("JwtToken");
                });

            modelBuilder.Entity("e_me.Model.Models.OneTimeAccessToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserDocumentId")
                        .IsUnique();

                    b.ToTable("OneTimeAccessToken");
                });

            modelBuilder.Entity("e_me.Model.Models.SecurityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SecurityType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SecurityRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e22e3dae-4433-4ad5-9f72-c3c065cba2f9"),
                            Name = "Administrator",
                            SecurityType = 0
                        },
                        new
                        {
                            Id = new Guid("7f094e06-b818-47ab-99c2-4dcc8895453c"),
                            Name = "Regular User",
                            SecurityType = 1
                        });
                });

            modelBuilder.Entity("e_me.Model.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ChangePasswordNextLogon")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LoginName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("e_me.Model.Models.UserAvatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAvatar");
                });

            modelBuilder.Entity("e_me.Model.Models.UserDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BirthCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeApartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeBlockNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeEntrance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeStreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumericCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonalNumericCode")
                        .IsUnique()
                        .HasFilter("[PersonalNumericCode] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("e_me.Model.Models.UserDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDocument");
                });

            modelBuilder.Entity("e_me.Model.Models.UserEcdhKeyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DerivedHmacKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HmacKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerPublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharedKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEcdhKeyInformation");
                });

            modelBuilder.Entity("e_me.Model.Models.UserSecurityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("SecurityRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SecurityRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSecurityRole");
                });

            modelBuilder.Entity("e_me.Model.Models.DocumentTemplate", b =>
                {
                    b.HasOne("e_me.Model.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("e_me.Model.Models.JwtToken", b =>
                {
                    b.HasOne("e_me.Model.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_me.Model.Models.OneTimeAccessToken", b =>
                {
                    b.HasOne("e_me.Model.Models.UserDocument", "UserDocument")
                        .WithMany()
                        .HasForeignKey("UserDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDocument");
                });

            modelBuilder.Entity("e_me.Model.Models.UserAvatar", b =>
                {
                    b.HasOne("e_me.Model.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_me.Model.Models.UserDetail", b =>
                {
                    b.HasOne("e_me.Model.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_me.Model.Models.UserDocument", b =>
                {
                    b.HasOne("e_me.Model.Models.DocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_me.Model.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_me.Model.Models.UserEcdhKeyInformation", b =>
                {
                    b.HasOne("e_me.Model.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_me.Model.Models.UserSecurityRole", b =>
                {
                    b.HasOne("e_me.Model.Models.SecurityRole", "SecurityRole")
                        .WithMany()
                        .HasForeignKey("SecurityRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_me.Model.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityRole");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
